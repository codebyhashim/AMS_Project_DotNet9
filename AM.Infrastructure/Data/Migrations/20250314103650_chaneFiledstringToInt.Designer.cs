// <auto-generated />
using System;
using AM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AM.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250314103650_chaneFiledstringToInt")]
    partial class chaneFiledstringToInt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AM.ApplicationCore.Models.TimeSlotsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new TimeOnly(0, 15, 0),
                            StartTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            EndTime = new TimeOnly(0, 30, 0),
                            StartTime = new TimeOnly(0, 15, 0)
                        },
                        new
                        {
                            Id = 3,
                            EndTime = new TimeOnly(0, 45, 0),
                            StartTime = new TimeOnly(0, 30, 0)
                        },
                        new
                        {
                            Id = 4,
                            EndTime = new TimeOnly(1, 0, 0),
                            StartTime = new TimeOnly(0, 45, 0)
                        },
                        new
                        {
                            Id = 5,
                            EndTime = new TimeOnly(1, 15, 0),
                            StartTime = new TimeOnly(1, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            EndTime = new TimeOnly(1, 30, 0),
                            StartTime = new TimeOnly(1, 15, 0)
                        },
                        new
                        {
                            Id = 7,
                            EndTime = new TimeOnly(1, 45, 0),
                            StartTime = new TimeOnly(1, 30, 0)
                        },
                        new
                        {
                            Id = 8,
                            EndTime = new TimeOnly(2, 0, 0),
                            StartTime = new TimeOnly(1, 45, 0)
                        },
                        new
                        {
                            Id = 9,
                            EndTime = new TimeOnly(2, 15, 0),
                            StartTime = new TimeOnly(2, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            EndTime = new TimeOnly(2, 30, 0),
                            StartTime = new TimeOnly(2, 15, 0)
                        },
                        new
                        {
                            Id = 11,
                            EndTime = new TimeOnly(2, 45, 0),
                            StartTime = new TimeOnly(2, 30, 0)
                        },
                        new
                        {
                            Id = 12,
                            EndTime = new TimeOnly(3, 0, 0),
                            StartTime = new TimeOnly(2, 45, 0)
                        },
                        new
                        {
                            Id = 13,
                            EndTime = new TimeOnly(3, 15, 0),
                            StartTime = new TimeOnly(3, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            EndTime = new TimeOnly(3, 30, 0),
                            StartTime = new TimeOnly(3, 15, 0)
                        },
                        new
                        {
                            Id = 15,
                            EndTime = new TimeOnly(3, 45, 0),
                            StartTime = new TimeOnly(3, 30, 0)
                        },
                        new
                        {
                            Id = 16,
                            EndTime = new TimeOnly(4, 0, 0),
                            StartTime = new TimeOnly(3, 45, 0)
                        },
                        new
                        {
                            Id = 17,
                            EndTime = new TimeOnly(4, 15, 0),
                            StartTime = new TimeOnly(4, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            EndTime = new TimeOnly(4, 30, 0),
                            StartTime = new TimeOnly(4, 15, 0)
                        },
                        new
                        {
                            Id = 19,
                            EndTime = new TimeOnly(4, 45, 0),
                            StartTime = new TimeOnly(4, 30, 0)
                        },
                        new
                        {
                            Id = 20,
                            EndTime = new TimeOnly(5, 0, 0),
                            StartTime = new TimeOnly(4, 45, 0)
                        },
                        new
                        {
                            Id = 21,
                            EndTime = new TimeOnly(5, 15, 0),
                            StartTime = new TimeOnly(5, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            EndTime = new TimeOnly(5, 30, 0),
                            StartTime = new TimeOnly(5, 15, 0)
                        },
                        new
                        {
                            Id = 23,
                            EndTime = new TimeOnly(5, 45, 0),
                            StartTime = new TimeOnly(5, 30, 0)
                        },
                        new
                        {
                            Id = 24,
                            EndTime = new TimeOnly(6, 0, 0),
                            StartTime = new TimeOnly(5, 45, 0)
                        },
                        new
                        {
                            Id = 25,
                            EndTime = new TimeOnly(6, 15, 0),
                            StartTime = new TimeOnly(6, 0, 0)
                        },
                        new
                        {
                            Id = 26,
                            EndTime = new TimeOnly(6, 30, 0),
                            StartTime = new TimeOnly(6, 15, 0)
                        },
                        new
                        {
                            Id = 27,
                            EndTime = new TimeOnly(6, 45, 0),
                            StartTime = new TimeOnly(6, 30, 0)
                        },
                        new
                        {
                            Id = 28,
                            EndTime = new TimeOnly(7, 0, 0),
                            StartTime = new TimeOnly(6, 45, 0)
                        },
                        new
                        {
                            Id = 29,
                            EndTime = new TimeOnly(7, 15, 0),
                            StartTime = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            Id = 30,
                            EndTime = new TimeOnly(7, 30, 0),
                            StartTime = new TimeOnly(7, 15, 0)
                        },
                        new
                        {
                            Id = 31,
                            EndTime = new TimeOnly(7, 45, 0),
                            StartTime = new TimeOnly(7, 30, 0)
                        },
                        new
                        {
                            Id = 32,
                            EndTime = new TimeOnly(8, 0, 0),
                            StartTime = new TimeOnly(7, 45, 0)
                        },
                        new
                        {
                            Id = 33,
                            EndTime = new TimeOnly(8, 15, 0),
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 34,
                            EndTime = new TimeOnly(8, 30, 0),
                            StartTime = new TimeOnly(8, 15, 0)
                        },
                        new
                        {
                            Id = 35,
                            EndTime = new TimeOnly(8, 45, 0),
                            StartTime = new TimeOnly(8, 30, 0)
                        },
                        new
                        {
                            Id = 36,
                            EndTime = new TimeOnly(9, 0, 0),
                            StartTime = new TimeOnly(8, 45, 0)
                        },
                        new
                        {
                            Id = 37,
                            EndTime = new TimeOnly(9, 15, 0),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 38,
                            EndTime = new TimeOnly(9, 30, 0),
                            StartTime = new TimeOnly(9, 15, 0)
                        },
                        new
                        {
                            Id = 39,
                            EndTime = new TimeOnly(9, 45, 0),
                            StartTime = new TimeOnly(9, 30, 0)
                        },
                        new
                        {
                            Id = 40,
                            EndTime = new TimeOnly(10, 0, 0),
                            StartTime = new TimeOnly(9, 45, 0)
                        },
                        new
                        {
                            Id = 41,
                            EndTime = new TimeOnly(10, 15, 0),
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 42,
                            EndTime = new TimeOnly(10, 30, 0),
                            StartTime = new TimeOnly(10, 15, 0)
                        },
                        new
                        {
                            Id = 43,
                            EndTime = new TimeOnly(10, 45, 0),
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = 44,
                            EndTime = new TimeOnly(11, 0, 0),
                            StartTime = new TimeOnly(10, 45, 0)
                        },
                        new
                        {
                            Id = 45,
                            EndTime = new TimeOnly(11, 15, 0),
                            StartTime = new TimeOnly(11, 0, 0)
                        },
                        new
                        {
                            Id = 46,
                            EndTime = new TimeOnly(11, 30, 0),
                            StartTime = new TimeOnly(11, 15, 0)
                        },
                        new
                        {
                            Id = 47,
                            EndTime = new TimeOnly(11, 45, 0),
                            StartTime = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 48,
                            EndTime = new TimeOnly(12, 0, 0),
                            StartTime = new TimeOnly(11, 45, 0)
                        },
                        new
                        {
                            Id = 49,
                            EndTime = new TimeOnly(12, 15, 0),
                            StartTime = new TimeOnly(12, 0, 0)
                        },
                        new
                        {
                            Id = 50,
                            EndTime = new TimeOnly(12, 30, 0),
                            StartTime = new TimeOnly(12, 15, 0)
                        },
                        new
                        {
                            Id = 51,
                            EndTime = new TimeOnly(12, 45, 0),
                            StartTime = new TimeOnly(12, 30, 0)
                        },
                        new
                        {
                            Id = 52,
                            EndTime = new TimeOnly(13, 0, 0),
                            StartTime = new TimeOnly(12, 45, 0)
                        },
                        new
                        {
                            Id = 53,
                            EndTime = new TimeOnly(13, 15, 0),
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = 54,
                            EndTime = new TimeOnly(13, 30, 0),
                            StartTime = new TimeOnly(13, 15, 0)
                        },
                        new
                        {
                            Id = 55,
                            EndTime = new TimeOnly(13, 45, 0),
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = 56,
                            EndTime = new TimeOnly(14, 0, 0),
                            StartTime = new TimeOnly(13, 45, 0)
                        },
                        new
                        {
                            Id = 57,
                            EndTime = new TimeOnly(14, 15, 0),
                            StartTime = new TimeOnly(14, 0, 0)
                        },
                        new
                        {
                            Id = 58,
                            EndTime = new TimeOnly(14, 30, 0),
                            StartTime = new TimeOnly(14, 15, 0)
                        },
                        new
                        {
                            Id = 59,
                            EndTime = new TimeOnly(14, 45, 0),
                            StartTime = new TimeOnly(14, 30, 0)
                        },
                        new
                        {
                            Id = 60,
                            EndTime = new TimeOnly(15, 0, 0),
                            StartTime = new TimeOnly(14, 45, 0)
                        },
                        new
                        {
                            Id = 61,
                            EndTime = new TimeOnly(15, 15, 0),
                            StartTime = new TimeOnly(15, 0, 0)
                        },
                        new
                        {
                            Id = 62,
                            EndTime = new TimeOnly(15, 30, 0),
                            StartTime = new TimeOnly(15, 15, 0)
                        },
                        new
                        {
                            Id = 63,
                            EndTime = new TimeOnly(15, 45, 0),
                            StartTime = new TimeOnly(15, 30, 0)
                        },
                        new
                        {
                            Id = 64,
                            EndTime = new TimeOnly(16, 0, 0),
                            StartTime = new TimeOnly(15, 45, 0)
                        },
                        new
                        {
                            Id = 65,
                            EndTime = new TimeOnly(16, 15, 0),
                            StartTime = new TimeOnly(16, 0, 0)
                        },
                        new
                        {
                            Id = 66,
                            EndTime = new TimeOnly(16, 30, 0),
                            StartTime = new TimeOnly(16, 15, 0)
                        },
                        new
                        {
                            Id = 67,
                            EndTime = new TimeOnly(16, 45, 0),
                            StartTime = new TimeOnly(16, 30, 0)
                        },
                        new
                        {
                            Id = 68,
                            EndTime = new TimeOnly(17, 0, 0),
                            StartTime = new TimeOnly(16, 45, 0)
                        },
                        new
                        {
                            Id = 69,
                            EndTime = new TimeOnly(17, 15, 0),
                            StartTime = new TimeOnly(17, 0, 0)
                        },
                        new
                        {
                            Id = 70,
                            EndTime = new TimeOnly(17, 30, 0),
                            StartTime = new TimeOnly(17, 15, 0)
                        },
                        new
                        {
                            Id = 71,
                            EndTime = new TimeOnly(17, 45, 0),
                            StartTime = new TimeOnly(17, 30, 0)
                        },
                        new
                        {
                            Id = 72,
                            EndTime = new TimeOnly(18, 0, 0),
                            StartTime = new TimeOnly(17, 45, 0)
                        },
                        new
                        {
                            Id = 73,
                            EndTime = new TimeOnly(18, 15, 0),
                            StartTime = new TimeOnly(18, 0, 0)
                        },
                        new
                        {
                            Id = 74,
                            EndTime = new TimeOnly(18, 30, 0),
                            StartTime = new TimeOnly(18, 15, 0)
                        },
                        new
                        {
                            Id = 75,
                            EndTime = new TimeOnly(18, 45, 0),
                            StartTime = new TimeOnly(18, 30, 0)
                        },
                        new
                        {
                            Id = 76,
                            EndTime = new TimeOnly(19, 0, 0),
                            StartTime = new TimeOnly(18, 45, 0)
                        },
                        new
                        {
                            Id = 77,
                            EndTime = new TimeOnly(19, 15, 0),
                            StartTime = new TimeOnly(19, 0, 0)
                        },
                        new
                        {
                            Id = 78,
                            EndTime = new TimeOnly(19, 30, 0),
                            StartTime = new TimeOnly(19, 15, 0)
                        },
                        new
                        {
                            Id = 79,
                            EndTime = new TimeOnly(19, 45, 0),
                            StartTime = new TimeOnly(19, 30, 0)
                        },
                        new
                        {
                            Id = 80,
                            EndTime = new TimeOnly(20, 0, 0),
                            StartTime = new TimeOnly(19, 45, 0)
                        },
                        new
                        {
                            Id = 81,
                            EndTime = new TimeOnly(20, 15, 0),
                            StartTime = new TimeOnly(20, 0, 0)
                        },
                        new
                        {
                            Id = 82,
                            EndTime = new TimeOnly(20, 30, 0),
                            StartTime = new TimeOnly(20, 15, 0)
                        },
                        new
                        {
                            Id = 83,
                            EndTime = new TimeOnly(20, 45, 0),
                            StartTime = new TimeOnly(20, 30, 0)
                        },
                        new
                        {
                            Id = 84,
                            EndTime = new TimeOnly(21, 0, 0),
                            StartTime = new TimeOnly(20, 45, 0)
                        },
                        new
                        {
                            Id = 85,
                            EndTime = new TimeOnly(21, 15, 0),
                            StartTime = new TimeOnly(21, 0, 0)
                        },
                        new
                        {
                            Id = 86,
                            EndTime = new TimeOnly(21, 30, 0),
                            StartTime = new TimeOnly(21, 15, 0)
                        },
                        new
                        {
                            Id = 87,
                            EndTime = new TimeOnly(21, 45, 0),
                            StartTime = new TimeOnly(21, 30, 0)
                        },
                        new
                        {
                            Id = 88,
                            EndTime = new TimeOnly(22, 0, 0),
                            StartTime = new TimeOnly(21, 45, 0)
                        },
                        new
                        {
                            Id = 89,
                            EndTime = new TimeOnly(22, 15, 0),
                            StartTime = new TimeOnly(22, 0, 0)
                        },
                        new
                        {
                            Id = 90,
                            EndTime = new TimeOnly(22, 30, 0),
                            StartTime = new TimeOnly(22, 15, 0)
                        },
                        new
                        {
                            Id = 91,
                            EndTime = new TimeOnly(22, 45, 0),
                            StartTime = new TimeOnly(22, 30, 0)
                        },
                        new
                        {
                            Id = 92,
                            EndTime = new TimeOnly(23, 0, 0),
                            StartTime = new TimeOnly(22, 45, 0)
                        },
                        new
                        {
                            Id = 93,
                            EndTime = new TimeOnly(23, 15, 0),
                            StartTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = 94,
                            EndTime = new TimeOnly(23, 30, 0),
                            StartTime = new TimeOnly(23, 15, 0)
                        },
                        new
                        {
                            Id = 95,
                            EndTime = new TimeOnly(23, 45, 0),
                            StartTime = new TimeOnly(23, 30, 0)
                        },
                        new
                        {
                            Id = 96,
                            EndTime = new TimeOnly(23, 59, 0),
                            StartTime = new TimeOnly(23, 45, 0)
                        });
                });

            modelBuilder.Entity("AM.Models.AppointmentModel", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookedSlots")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appoinments");
                });

            modelBuilder.Entity("AM.Models.DoctorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailabilityDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailabilityTimeSlot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WaitTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("AM.Models.PatientModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AM.Models.AppointmentModel", b =>
                {
                    b.HasOne("AM.Models.DoctorModel", "Doctor")
                        .WithMany("Appoinment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AM.Models.PatientModel", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AM.Models.DoctorModel", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AM.Models.PatientModel", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AM.Models.DoctorModel", b =>
                {
                    b.Navigation("Appoinment");
                });
#pragma warning restore 612, 618
        }
    }
}
